/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';

import 'ionicons';




declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface IconExternal {

    }

    interface IonicBarChart {
      'color': string;
      'data': string;
    }

    interface IonicButton {
      'color': string;
      'disabled': boolean;
      'type': string;
    }

    interface IonicNewsletterSignup {
      'arrowMode': boolean;
      'buttonText': string;
      'darkMode': boolean;
      'lg': boolean;
      'placeholder': string;
    }

    interface IonicSearch {
      'mobile': boolean;
    }

    interface IonicSlider {

    }

    interface IonicSnapBar {

    }
  }


    interface HTMLIconExternalElement extends StencilComponents.IconExternal, HTMLStencilElement {}

    var HTMLIconExternalElement: {
      prototype: HTMLIconExternalElement;
      new (): HTMLIconExternalElement;
    };
    

    interface HTMLIonicBarChartElement extends StencilComponents.IonicBarChart, HTMLStencilElement {}

    var HTMLIonicBarChartElement: {
      prototype: HTMLIonicBarChartElement;
      new (): HTMLIonicBarChartElement;
    };
    

    interface HTMLIonicButtonElement extends StencilComponents.IonicButton, HTMLStencilElement {}

    var HTMLIonicButtonElement: {
      prototype: HTMLIonicButtonElement;
      new (): HTMLIonicButtonElement;
    };
    

    interface HTMLIonicNewsletterSignupElement extends StencilComponents.IonicNewsletterSignup, HTMLStencilElement {}

    var HTMLIonicNewsletterSignupElement: {
      prototype: HTMLIonicNewsletterSignupElement;
      new (): HTMLIonicNewsletterSignupElement;
    };
    

    interface HTMLIonicSearchElement extends StencilComponents.IonicSearch, HTMLStencilElement {}

    var HTMLIonicSearchElement: {
      prototype: HTMLIonicSearchElement;
      new (): HTMLIonicSearchElement;
    };
    

    interface HTMLIonicSliderElement extends StencilComponents.IonicSlider, HTMLStencilElement {}

    var HTMLIonicSliderElement: {
      prototype: HTMLIonicSliderElement;
      new (): HTMLIonicSliderElement;
    };
    

    interface HTMLIonicSnapBarElement extends StencilComponents.IonicSnapBar, HTMLStencilElement {}

    var HTMLIonicSnapBarElement: {
      prototype: HTMLIonicSnapBarElement;
      new (): HTMLIonicSnapBarElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'icon-external': JSXElements.IconExternalAttributes;
    'ionic-bar-chart': JSXElements.IonicBarChartAttributes;
    'ionic-button': JSXElements.IonicButtonAttributes;
    'ionic-newsletter-signup': JSXElements.IonicNewsletterSignupAttributes;
    'ionic-search': JSXElements.IonicSearchAttributes;
    'ionic-slider': JSXElements.IonicSliderAttributes;
    'ionic-snap-bar': JSXElements.IonicSnapBarAttributes;
    }
  }

  namespace JSXElements {

    export interface IconExternalAttributes extends HTMLAttributes {

    }

    export interface IonicBarChartAttributes extends HTMLAttributes {
      'color'?: string;
      'data'?: string;
    }

    export interface IonicButtonAttributes extends HTMLAttributes {
      'color'?: string;
      'disabled'?: boolean;
      'type'?: string;
    }

    export interface IonicNewsletterSignupAttributes extends HTMLAttributes {
      'arrowMode'?: boolean;
      'buttonText'?: string;
      'darkMode'?: boolean;
      'lg'?: boolean;
      'placeholder'?: string;
    }

    export interface IonicSearchAttributes extends HTMLAttributes {
      'mobile'?: boolean;
    }

    export interface IonicSliderAttributes extends HTMLAttributes {

    }

    export interface IonicSnapBarAttributes extends HTMLAttributes {

    }
  }

  interface HTMLElementTagNameMap {
    'icon-external': HTMLIconExternalElement
    'ionic-bar-chart': HTMLIonicBarChartElement
    'ionic-button': HTMLIonicButtonElement
    'ionic-newsletter-signup': HTMLIonicNewsletterSignupElement
    'ionic-search': HTMLIonicSearchElement
    'ionic-slider': HTMLIonicSliderElement
    'ionic-snap-bar': HTMLIonicSnapBarElement
  }

  interface ElementTagNameMap {
    'icon-external': HTMLIconExternalElement;
    'ionic-bar-chart': HTMLIonicBarChartElement;
    'ionic-button': HTMLIonicButtonElement;
    'ionic-newsletter-signup': HTMLIonicNewsletterSignupElement;
    'ionic-search': HTMLIonicSearchElement;
    'ionic-slider': HTMLIonicSliderElement;
    'ionic-snap-bar': HTMLIonicSnapBarElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;